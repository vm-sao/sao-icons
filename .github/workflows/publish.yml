name: Publish

on:
  push:
    branches:
      - main
    paths:
      - 'packages/**'

permissions:
  actions: read
  contents: read

jobs:
  main:
    runs-on: ubuntu-latest
    steps:
      # Checkout the repository
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      # Install pnpm
      - uses: pnpm/action-setup@v4

      # Cache node_modules
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'

      # Setup .npmrc file to publish to npm
      - run: |
          echo "registry=https://registry.npmjs.org/" > ~/.npmrc
          echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}" >> ~/.npmrc

      # Install dependencies
      - run: pnpm install --frozen-lockfile
      - uses: nrwl/nx-set-shas@v4

      # Detect affected projects
      - name: Detect Affected Projects
        id: detect-projects
        run: |
          # Find changes in packages directory
          affected_dirs=$(git diff --name-only HEAD~1 HEAD | grep '^packages/' | cut -d '/' -f 2 | sort | uniq | xargs)

          # Handle empty results
          if [ -z "$affected_dirs" ]; then
            echo "No affected projects found."
            echo "affected_projects=[]" >> $GITHUB_ENV
            exit 0
          fi

          # Sanitize and convert to JSON array for GitHub Actions
          affected_json=$(echo "$affected_dirs" | tr ' ' '\n' | jq -R . | jq -s .)
          echo "affected_projects=$affected_json" >> $GITHUB_ENV
          echo "Affected Projects: $affected_json"


      # Publish affected projects
      - name: Publish
        if: env.affected_projects != '[]'
        run: |
          echo "Raw Affected Projects: ${{ env.affected_projects }}"

          # Ensure that the affected_projects variable is correctly formatted
          cleaned_projects=$(echo "${{ env.affected_projects }}" | jq -c)

          # Debug output to check cleaned_projects
          echo "Cleaned Affected Projects: $cleaned_projects"

          # Check for empty cleaned_projects
          if [ "$cleaned_projects" == "[]" ]; then
            echo "No cleaned projects to publish."
            exit 0
          fi

          # Process each project
          for project in $(echo "$cleaned_projects" | jq -r '.[]'); do
            echo "Publishing @sao-ui/$project"
            pnpm exec nx run "$project:auto"
          done
